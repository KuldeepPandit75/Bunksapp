<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Bunksapp</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>
  <body id="bunkBody">
    <div class="header">
        <%if(roomName=="a8Room"){%>
            <div class="circle"></div>
            <p>A8 Group Chat</p>
        <%}else{%>
            <div class="circle"></div>
            <p>Universal Group Chat</p>
        <%}%>
        <div class="optMech">
            <i id="dropIcon" class="fa-solid fa-ellipsis-vertical"></i>
            <%if(logCheck._id!="667298d69d8ec76a6c9356b1"){%>
                <div class="options">
                    <p id="opt1">Prev Chat Request</p>
                </div>
            <%}%>
        </div>
        
    </div>
    <ul id="messages">        
        <%if(logCheck.authStat){%>
            <%let currDate=null%>
            <%for(chat of chats){%>
    
                <%if(currDate!=chat.created_at.toString().split(" ").slice(0,3).join(" ")){%>
                    <%currDate=chat.created_at.toString().split(" ").slice(0,3).join(" ")%>
                    <li class="dateBox"><%= currDate %></li>
                <%}%>
                <%if(chat.from==logCheck.name){%>
                    <li class="msgList">
                        <div class="message-box sender">
                            <p class="message-text"><%=chat.message%>&nbsp; &nbsp; &nbsp; &nbsp;</p>
                            <span class="message-time"><%=chat.created_at.toString().split(" ")[4].slice(0,5) %></span>
                            <span class="timeStore"><%=chat.created_at%></span>
                        </div>
                    </li>
                <%}else{%>
                    <li class="msgList">
                        <div class="message-box receiver">
                            <%if(chat.anonymous && logCheck._id!="667298d69d8ec76a6c9356b1"){%>
                                <p id="senderName">~anonymous</p>
                            <%}else{%>
                                <p id="senderName">~<%=chat.from%></p>
                            <%}%>
                            <p class="message-text"><%=chat.message%>&nbsp; &nbsp; &nbsp; &nbsp;</p>
                            <span class="message-time"><%=chat.created_at.toString().split(" ")[4].slice(0,5) %></span>
                        </div>
                    </li>
                <%}%>
            <%}%>
        <%}%>
        
    </ul>
    <!-- <div id="voteModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <form id="voteForm">
            <label for="votePurpose">Vote Purpose:</label>
            <input type="text" id="votePurpose" name="votePurpose" required><br><br>
            <p>Options:</p><br>
            <div id="optionsContainer">
              <input type="text" name="option" required placeholder="Enter Option"><br><br>
              <input type="text" name="option" required placeholder="Enter Option"><br><br>
            </div>
            <button type="button" id="addOpt">Add Option</button><br><br>
            <button type="button" id="cancelVote">Cancel</button>
            <button type="submit">Send Vote</button>
          </form>
        </div>
    </div> -->
    <div class="custom-context-menu" id="contextMenu">
        <ul>
          <li id="editMsg">Edit</li>
          <li id="delMsg">Delete</li>
        </ul>
    </div>
    <div class="editMsg">
        <form>
            <input type="text" name="editMsg">
            <button>Edit</button>
        </form>
    </div>
    <form id="form" method="post" action="/bunksapp/chat/<%=logCheck._id%>/<%=roomName%>">
        <!-- <div class="vote"><i class="fa-solid fa-square-poll-vertical"></i></div> -->
        <input id="input" autocomplete="off" name="sentMsg"/>
        <button type="submit" id="nonAnony" name="submitBtn" value="nonAnony">Send</button>
        <button type="submit" id="anony" name="submitBtn" value="anony">Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>

        document.addEventListener("DOMContentLoaded", () => {

            function createRecMessageElement(chat,sender) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'msgList';

                // Create the <div> element with class "message-box receiver"
                const div = document.createElement('div');
                div.className = 'message-box receiver';

                // Create the <p> element for the sender name
                const senderNameP = document.createElement('p');
                senderNameP.id = 'senderName';
                senderNameP.textContent = `~${sender}`;

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'message-text';
                messageTextP.innerHTML = `${chat}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'message-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                // Append the sender name, message text, and message time to the <div>
                div.appendChild(senderNameP);
                div.appendChild(messageTextP);
                div.appendChild(messageTimeSpan);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            function createSentMessageElement(chat) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'msgList';

                // Create the <div> element with class "message-box sender"
                const div = document.createElement('div');
                div.className = 'message-box sender';

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'message-text';
                messageTextP.innerHTML = `${chat}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'message-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                const msgTimeStore=document.createElement('span');
                msgTimeStore.className='timeStore';
                msgTimeStore.innerText=new Date();

                // Append the message text and message time to the <div>
                div.appendChild(messageTextP);
                div.appendChild(messageTimeSpan);
                div.appendChild(msgTimeStore);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            //delete this

            // function createVoteMessageElement(data) {
            //     const li = document.createElement('li');
            //     li.className = 'voteList';

            //     const div = document.createElement('div');
            //     div.className = 'vote-box';

            //     const senderNameP = document.createElement('p');
            //     senderNameP.id = 'senderName';
            //     senderNameP.textContent = `~${sender}`;

            //     const messageTextP = document.createElement('p');
            //     messageTextP.className = 'vote-text';
            //     messageTextP.innerHTML = `${data.purpose}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

            //     const messageTimeSpan = document.createElement('span');
            //     messageTimeSpan.className = 'vote-time';
            //     const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
            //     messageTimeSpan.textContent = messageTime;

            //     div.appendChild(senderNameP);
            //     div.appendChild(messageTextP);
            //     div.appendChild(messageTimeSpan);

            //     li.appendChild(div);

            //     return li;
            // }

            function createChatReqElement(msg,sender) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'reqMsg';

                // Create the <div> element with class "message-box receiver"
                const div = document.createElement('div');
                div.className = 'req-box';

                // Create the <p> element for the sender name
                const senderNameP = document.createElement('p');
                senderNameP.id = 'reqSender';
                senderNameP.textContent = `~${sender}`;

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'req-text';
                messageTextP.innerHTML = `${msg}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'req-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                let allowBtn=document.createElement("button");
                allowBtn.classList.add("allow");
                allowBtn.innerText="Allow";

                // Append the sender name, message text, and message time to the <div>
                div.appendChild(senderNameP);
                div.appendChild(messageTextP);
                div.append(allowBtn);
                div.appendChild(messageTimeSpan);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            // let messages = document.getElementById("messages");
            // setInterval(function() {
            //     messages.scrollTop = messages.scrollHeight;
            //     console.log("hello")
            // },1000);

            try{

                const socket = io();

                let form = document.querySelector("#form");
                let msg = document.querySelector("#input");
                let dropDown=document.querySelector(".optMech");

                if("<%=logCheck._id%>"!="667298d69d8ec76a6c9356b1"){
                    let dropBox=document.querySelector(".options");
                    let chatReq=document.querySelector("#opt1");

                    dropDown.addEventListener("click",()=>{
                        if(dropBox.style.display=="none"){
                            dropBox.style.display="flex";
                        }else{
                            dropBox.style.display="none";
                        }
                        
                    })

                    chatReq.addEventListener("click",()=>{
                        socket.emit("chatreq","<%=logCheck._id%>","<%=logCheck.name%>");
                        console.log("step1 done")
                    })
                }

                
                socket.on("chatReqRec",(id,name)=>{
                    if("<%=logCheck._id%>"=="667298d69d8ec76a6c9356b1"){
                        let chatSec=document.querySelector("#messages");
                        let list=createChatReqElement(`chat req received from id ${id}`,name);
                        chatSec.append(list);
                        list.scrollIntoView({ behavior: 'smooth' });
                        let allowBtn=document.querySelectorAll(".allow");
                        for(let i=0;i<allowBtn.length;i++){
                            allowBtn[i].addEventListener("click",()=>{
                                socket.emit("allowed",id);
                                allowBtn[i].innerText="Allowed";
                            })
                        }
                       
                    }
                }) 

                form[1].addEventListener("click", async(e) => {

                    if (msg.value != "") {
                        socket.emit("msgSend", msg.value,"<%=logCheck.name%>");
                        let chatSec=document.querySelector("#messages");
                        let list=createSentMessageElement(msg.value);
                        chatSec.append(list);  
                        list.scrollIntoView({ behavior: 'smooth' });
                    }

                    setTimeout(() => {
                        msg.value = "";
                    }, 100);
                });

                form[2].addEventListener("click", async(e) => {

                    if (msg.value != "") {
                        socket.emit("msgSend", msg.value,"anonymous");
                        let chatSec=document.querySelector("#messages");
                        let list=createSentMessageElement(msg.value);
                        chatSec.append(list);  
                        list.scrollIntoView({ behavior: 'smooth' });
                    }

                    setTimeout(() => {
                        msg.value = "";
                    }, 100);
                });
                

                if("<%=roomName%>"=="a8Room"){
                    socket.emit("joinReq","a8Room");
                }else{
                    socket.emit("joinReq","uniRoom");
                }

                let operationEle;
                let sentMsgs=document.querySelectorAll(".sender");

                const contextMenu = document.getElementById('contextMenu');
                sentMsgs.forEach(sentMsg=>{
                    sentMsg.parentElement.parentElement.addEventListener('contextmenu', function(event) {
                        event.preventDefault(); // Prevent the default context menu from appearing

                        // Get the position of the mouse click
                        const posX = event.pageX;
                        const posY = event.pageY;

                        // Position the custom context menu at the click position
                        contextMenu.style.top = `${posY}px`;
                        contextMenu.style.left = `${posX}px`;
                        if(event.target.parentElement.className=="message-box sender" || event.target.parentElement.className=="msgList"){
                            contextMenu.style.display = 'block';
                        }

                        if(event.target.parentElement.className=="message-box sender"){
                            operationEle=event.target.parentElement;
                        }else{
                            operationEle=event.target;
                        }
                        
                    });
                });

                let deleteBtn=document.querySelector("#delMsg");
                deleteBtn.addEventListener("click",(e)=>{
                    let timeStore=new Date(operationEle.lastElementChild.innerText);
                    let currTime=new Date();
                    let duration=(currTime.getTime()- timeStore.getTime())/60000;
                    console.log(duration);
                    if(duration<60){
                        let chatSec=document.querySelector("#messages");
                        operationEle.parentElement.remove();
                        socket.emit("delMsg",operationEle.children[0].innerText,timeStore);
                    }
                    
                });

                // Hide the context menu when clicking anywhere else
                document.addEventListener('click', function(event) {
                    if (contextMenu.style.display === 'block') {
                    contextMenu.style.display = 'none';
                    }
                });



                // document.querySelector(".vote").addEventListener("click",()=>{
                //     const modal = document.getElementById('voteModal');
                //     modal.style.display = "block";
                // });

                // // Function to close the modal
                // document.querySelector('.close').addEventListener("click",()=> {
                //     const modal = document.getElementById('voteModal');
                //     modal.style.display = "none";
                // })

                //     // Function to add additional option field
                // document.querySelector("#addOpt").addEventListener("click",()=>{
                //     const optionsContainer = document.getElementById('optionsContainer');
                //     const input = document.createElement('input');
                //     input.type = 'text';
                //     input.name = 'option';
                //     input.required = true;
                //     input.placeholder = 'Enter option';
                //     optionsContainer.appendChild(input);
                //     optionsContainer.appendChild(document.createElement('br'));
                //     optionsContainer.appendChild(document.createElement('br'));
                // });

                // // Function to handle form submission (you can modify this as per your backend requirements)
                // document.getElementById('voteForm').addEventListener('submit', (e) => {
                //     e.preventDefault();
                //     const formData = new FormData(e.target);
                //     let data={
                //         purpose: formData.get('votePurpose'),
                //         options: formData.getAll('option')
                //     };
                //     // Example of sending form data via Socket.io
                //     socket.emit('sendVote', data);
                //     const modal = document.getElementById('voteModal');
                //     modal.style.display = "none"; // Close the modal after sending vote
                // });

                // // Function to cancel vote
                // document.querySelector("#cancelVote").addEventListener("click",()=>{
                //     const modal = document.getElementById('voteModal');
                //     modal.style.display = "none";
                // });

                socket.on("delRecMsg",(msg)=>{
                    let recMsgs=document.querySelectorAll(".receiver");
                    for(recMsg of recMsgs){
                        if(recMsg.children[1].innerText.trim()==msg.trim()){
                            recMsg.parentElement.remove();
                        }
                    }
                })

                socket.on("msgRec", (msg,sender) => {
                    let chatSec=document.querySelector("#messages");
                    let list=createRecMessageElement(msg,sender);
                    chatSec.append(list);
                    list.scrollIntoView({ behavior: 'smooth' });
                })

                socket.on("connect", () => {
                    console.log("Connected to server");
                    socket.id=localStorage.getItem("socketId");
                    console.log(socket.id);
                });

                socket.on("disconnect", () => {
                    console.log("Disconnected from server");
                });
            }catch(err){
                console.log(err);
            }

            

        });

    </script>
  </body>
</html>