<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Bunksapp</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>
  <body id="bunkBody">
    <div class="header">
        <%if(roomName=="a8Room"){%>
            <div class="circle"></div>
            <p>A8 Group Chat</p>
        <%}else{%>
            <div class="circle"></div>
            <p>Universal Group Chat</p>
        <%}%>
        <div class="optMech">
            <i id="dropIcon" class="fa-solid fa-ellipsis-vertical"></i>
            <%if(logCheck._id!="667298d69d8ec76a6c9356b1"){%>
                <div class="options">
                    <p id="opt1">Prev Chat Request</p>
                </div>
            <%}%>
        </div>
        
    </div>
    <ul id="messages">        
        <%if(logCheck.authStat){%>
            <%for(chat of chats){%>
                <%if(chat.from==logCheck.name){%>
                    <li class="msgList">
                        <div class="message-box sender">
                            <p class="message-text"><%=chat.message%>&nbsp; &nbsp; &nbsp; &nbsp;</p>
                            <span class="message-time"><%=chat.created_at.toString().split(" ")[4].slice(0,5) %></span>
                        </div>
                    </li>
                <%}else{%>
                    <li class="msgList">
                        <div class="message-box receiver">
                            <p id="senderName">~<%=chat.from%></p>
                            <p class="message-text"><%=chat.message%>&nbsp; &nbsp; &nbsp; &nbsp;</p>
                            <span class="message-time"><%=chat.created_at.toString().split(" ")[4].slice(0,5) %></span>
                        </div>
                    </li>
                <%}%>
            <%}%>
        <%}%>
        
    </ul>
    <form id="form" method="post" action="/bunksapp/chat/<%=logCheck._id%>/<%=roomName%>">
      <input id="input" autocomplete="off" name="sentMsg"/><button>Send</button>
    </form>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>

        document.addEventListener("DOMContentLoaded", () => {

            function createRecMessageElement(chat,sender) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'msgList';

                // Create the <div> element with class "message-box receiver"
                const div = document.createElement('div');
                div.className = 'message-box receiver';

                // Create the <p> element for the sender name
                const senderNameP = document.createElement('p');
                senderNameP.id = 'senderName';
                senderNameP.textContent = `~${sender}`;

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'message-text';
                messageTextP.innerHTML = `${chat}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'message-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                // Append the sender name, message text, and message time to the <div>
                div.appendChild(senderNameP);
                div.appendChild(messageTextP);
                div.appendChild(messageTimeSpan);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            function createSentMessageElement(chat) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'msgList';

                // Create the <div> element with class "message-box sender"
                const div = document.createElement('div');
                div.className = 'message-box sender';

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'message-text';
                messageTextP.innerHTML = `${chat}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'message-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                // Append the message text and message time to the <div>
                div.appendChild(messageTextP);
                div.appendChild(messageTimeSpan);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            function createChatReqElement(msg,sender) {
                // Create the <li> element
                const li = document.createElement('li');
                li.className = 'msgList';

                // Create the <div> element with class "message-box receiver"
                const div = document.createElement('div');
                div.className = 'message-box receiver';

                // Create the <p> element for the sender name
                const senderNameP = document.createElement('p');
                senderNameP.id = 'senderName';
                senderNameP.textContent = `~${sender}`;

                // Create the <p> element for the message text
                const messageTextP = document.createElement('p');
                messageTextP.className = 'message-text';
                messageTextP.innerHTML = `${msg}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;

                // Create the <span> element for the message time
                const messageTimeSpan = document.createElement('span');
                messageTimeSpan.className = 'message-time';
                const messageTime = new Date().toString().split(" ")[4].slice(0, 5);
                messageTimeSpan.textContent = messageTime;

                let allowBtn=document.createElement("button");
                allowBtn.classList.add("allow");
                allowBtn.innerText="Allow";

                // Append the sender name, message text, and message time to the <div>
                div.appendChild(senderNameP);
                div.appendChild(messageTextP);
                div.append(allowBtn);
                div.appendChild(messageTimeSpan);

                // Append the <div> to the <li>
                li.appendChild(div);

                // Return the complete <li> element
                return li;
            }

            // let messages = document.getElementById("messages");
            // setInterval(function() {
            //     messages.scrollTop = messages.scrollHeight;
            //     console.log("hello")
            // },1000);

            try{

                const socket = io();

                let form = document.querySelector("#form");
                let msg = document.querySelector("#input");
                let dropDown=document.querySelector(".optMech");
                if("<%=logCheck._id%>"!="667298d69d8ec76a6c9356b1"){
                    let dropBox=document.querySelector(".options");
                    let chatReq=document.querySelector("#opt1");

                    dropDown.addEventListener("click",()=>{
                        if(dropBox.style.display=="none"){
                            dropBox.style.display="flex";
                        }else{
                            dropBox.style.display="none";
                        }
                        
                    })

                    chatReq.addEventListener("click",()=>{
                        socket.emit("chatreq","<%=logCheck._id%>","<%=logCheck.name%>");
                        console.log("step1 done")
                    })
                }

                
                socket.on("chatReqRec",(id,name)=>{
                    if("<%=logCheck._id%>"=="667298d69d8ec76a6c9356b1"){
                        let chatSec=document.querySelector("#messages");
                        let list=createChatReqElement(`chat req received from id ${id}`,name);
                        chatSec.append(list);
                        list.scrollIntoView({ behavior: 'smooth' });
                        let allowBtn=document.querySelector(".allow");  
                        allowBtn.addEventListener("click",()=>{
                            socket.emit("allowed",id);
                            allowBtn.innerText="Allowed";
                        })
                    }
                })

                form.addEventListener("submit", async(e) => {

                    if (msg.value != "") {
                        socket.emit("msgSend", msg.value,"<%=logCheck.name%>");
                        let chatSec=document.querySelector("#messages");
                        let list=createSentMessageElement(msg.value);
                        chatSec.append(list);  
                        list.scrollIntoView({ behavior: 'smooth' });
                    }

                    setTimeout(() => {
                        msg.value = "";
                    }, 100);
                });
                

                if("<%=roomName%>"=="a8Room"){
                    socket.emit("joinReq","a8Room");
                }else{
                    socket.emit("joinReq","uniRoom");
                }

                socket.on("msgRec", (msg,sender) => {
                    let chatSec=document.querySelector("#messages");
                    let list=createRecMessageElement(msg,sender);
                    chatSec.append(list);
                    list.scrollIntoView({ behavior: 'smooth' });
                })

                socket.on("connect", () => {
                    console.log("Connected to server");
                    socket.id=localStorage.getItem("socketId");
                    console.log(socket.id);
                });

                socket.on("disconnect", () => {
                    console.log("Disconnected from server");
                });
            }catch(err){
                console.log(err);
            }

            

        });

    </script>
  </body>
</html>